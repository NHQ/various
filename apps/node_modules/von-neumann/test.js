var vonNeuman = require('./'),
    test = require('tape');

function sorter(a, b) {
    a = a.join(',');
    b = b.join(',');
    return a > b ? -1 : a < b ? 1 : 0;
}

test('2D, 1 range', function(t) {
    t.deepEqual(vonNeuman(1, 2).sort(sorter), [
                 [ 0,-1],
        [-1, 0],          [ 1, 0],
                 [ 0, 1]
    ].sort(sorter));
    t.end();
});

test('2D, 2 range', function(t) {
    t.deepEqual(vonNeuman(2, 2).sort(sorter), [
                          [ 0,-2],
                 [-1,-1], [ 0,-1], [ 1,-1],
        [-2, 0], [-1, 0],          [ 1, 0], [ 2, 0],
                 [-1, 1], [ 0, 1], [ 1, 1],
                          [ 0, 2]
    ].sort(sorter));
    t.end();
});

test('2D, 5 range', function(t) {

    t.deepEqual(vonNeuman(5, 2).sort(sorter), [
                                                          [ 0, -5],
                                                [-1, -4], [ 0, -4], [ 1, -4],
                                      [-2, -3], [-1, -3], [ 0, -3], [ 1, -3], [ 2, -3],
                            [-3, -2], [-2, -2], [-1, -2], [ 0, -2], [ 1, -2], [ 2, -2], [ 3, -2],
                  [-4, -1], [-3, -1], [-2, -1], [-1, -1], [ 0, -1], [ 1, -1], [ 2, -1], [ 3, -1], [ 4, -1],
        [-5,  0], [-4,  0], [-3,  0], [-2,  0], [-1,  0],           [ 1,  0], [ 2,  0], [ 3,  0], [ 4,  0], [ 5,  0],
                  [-4,  1], [-3,  1], [-2,  1], [-1,  1], [ 0,  1], [ 1,  1], [ 2,  1], [ 3,  1], [ 4,  1],
                            [-3,  2], [-2,  2], [-1,  2], [ 0,  2], [ 1,  2], [ 2,  2], [ 3,  2],
                                      [-2,  3], [-1,  3], [ 0,  3], [ 1,  3], [ 2,  3],
                                                [-1,  4], [ 0,  4], [ 1,  4],
                                                          [ 0,  5]
    ].sort(sorter));
    t.end();
});

test('3D, 1 range', function(t) {
    t.deepEqual(vonNeuman(1, 3).sort(sorter), [
                    [ 0, 0,-1],

                    [ 0,-1, 0],
        [-1, 0, 0],             [ 1, 0, 0],
                    [ 0, 1, 0],

                    [ 0, 0, 1]
    ].sort(sorter));
    t.end();
});

test('3D, 2 range', function(t) {
    t.deepEqual(vonNeuman(2, 3).sort(sorter), [
        [ 2, 0, 0 ],
        [ 1, 1, 0 ],
        [ 1, 0, 1 ],
        [ 1, 0, 0 ],
        [ 1, 0, -1 ],
        [ 1, -1, 0 ],
        [ 0, 2, 0 ],
        [ 0, 1, 1 ],
        [ 0, 1, 0 ],
        [ 0, 1, -1 ],
        [ 0, 0, 2 ],
        [ 0, 0, 1 ],
        [ 0, 0, -2 ],
        [ 0, 0, -1 ],
        [ 0, -2, 0 ],
        [ 0, -1, 1 ],
        [ 0, -1, 0 ],
        [ 0, -1, -1 ],
        [ -2, 0, 0 ],
        [ -1, 1, 0 ],
        [ -1, 0, 1 ],
        [ -1, 0, 0 ],
        [ -1, 0, -1 ],
        [ -1, -1, 0 ]
    ].sort(sorter));
    t.end();
});


test('4D, 1 range', function(t) {
    t.deepEqual(vonNeuman(1, 4).sort(sorter), [
        [ 1, 0, 0, 0 ],
        [ 0, 1, 0, 0 ],
        [ 0, 0, 1, 0 ],
        [ 0, 0, 0, 1 ],
        [ 0, 0, 0, -1 ],
        [ 0, 0, -1, 0 ],
        [ 0, -1, 0, 0 ],
        [ -1, 0, 0, 0 ]
    ].sort(sorter));
    t.end();
});
